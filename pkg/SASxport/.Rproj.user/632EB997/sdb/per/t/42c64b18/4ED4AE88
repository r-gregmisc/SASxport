{
    "collab_server" : "",
    "contents" : "\\name{read.xport}\n\\alias{read.xport}\n\\title{Import a SAS XPORT File}\n\\description{\n  Read a SAS XPORT format file and return the contained dataset(s).\n}\n\\usage{\nread.xport(file,\n           force.integer=TRUE,\n           formats=NULL,\n           name.chars=NULL,\n           names.tolower=FALSE,\n           keep=NULL,\n           drop=NULL,\n           as.is=0.95,\n           verbose=FALSE,\n           as.list=FALSE,\n           include.formats=FALSE\n           )\n}\n\\arguments{\n  \\item{file}{Character string specifying the name or URL of a SAS XPORT\n    file.\n  }\n  \\item{force.integer}{Logical flag indicating whether integer-valued\n    variables should be returned as integers (\\code{TRUE}) or doubles\n    (\\code{FALSE}). Variables outside the supported integer range\n    (\\code{.Machine$integer.max}) will always be converted to\n    doubles.\n  }\n  \\item{formats}{a data frame or list (like that created by\n    \\code{foreign:::read.xport}) containing \\code{PROC FORMAT}\n    output, if such output is not stored in the main transport\n    file.\n  }\n  \\item{name.chars}{Vector of additional characters permissible in\n    variable names. By default, only the alpha and numeric\n    characters ([A-Za-z0-9]) and periods ('.') are permitted. All\n    other characters are converted into periods ('.').\n  }\n  \\item{names.tolower}{Logical indicating whether variable and dataset\n    names should be converted to lowercase (\\code{TRUE}) or left\n    uppercase (\\code{FALSE})\n  }\n  \\item{keep}{a vector of names of SAS datasets to process.  This list\n    must include \\code{PROC FORMAT} dataset if it is present for\n    datasets to use use any of its value label formats.\n  }\n  \\item{drop}{a vector of names of SAS datasets to ignore (original SAS\n    upper case names)\n  }\n  \\item{as.is}{\n    Either a logical flag indicating whether SAS character variables should\n    be preserved as character objects (\\code{TRUE}) or factor\n    objects (\\code{FALSE}), or a fractional cutoff between 0 and 1.\n\n    When a fractional cutoff is provided, character variables\n    containing a more than this fraction of unique values will be\n    stored as a character variables. This is done in order to\n    preserve space, since factors must store both the integer factor\n    codes and the character factor labels.\n  }\n  \\item{verbose}{Logical indicating whether progress should be printed\n    during the data loading and conversion process.}\n  \\item{as.list}{Logical indicating whether to return a list even if\n    the SAS xport file contains only only one dataset.}\n  \\item{include.formats}{Logical indicating whether to include SAS\n    format information (if present) in the returned list}\n}\n\\value{\n  If only a single dataset is present (after removing \\code{PROC FORMAT}\n  data when \\code{include.formats=FALSE}), the return value is a single\n  dataframe  object. Otherwise the return is a list of dataframe objects.\n\n  Note that if \\code{include.formats=TRUE}, the returned list will\n  contain a dataframe named \"FORMATS\" containing any available 'PROC FORMAT'\n  information.\n}\n\\details{\n\n  \\itemize{\n    \\item SAS date, time, and date/time variables are converted respectively to \\code{Date},\n    POSIX, or \\code{chron} objects\n\n    \\item SAS labels are stored in \"label\" attributes on each variable,\n    and are accessible using the \\code{\\link{label}} function.\n\n    \\item SAS formats are stored in \"SASformat\" attributes on each\n    variable, and are accessable using \\code{\\link{SASformat}}\n\n    \\item SAS iformats are stored in \"SASiformat\" attributes on each\n    variable, and are accessable using \\code{\\link{SASiformat}}\n\n    \\item SAS integer variables are stored as integers unless\n      \\code{force.integer} is \\code{FALSE}\n  }\n\n  If the file includes the output of \\code{PROC FORMAT CNTLOUT=},\n  variables having customized label formats will be converted to \\code{factor}\n  objects with appropriate labels.\n\n  If a datasets in the original file has a label or type, these will be\n  stored in the corresponding 'lable' and 'SAStype' attributes, which\n  can be accessed by the \\code{\\link{label}} and \\code{\\link{SAStype}}\n  functions.\n}\n\\author{ Gregory R. Warnes \\email{greg@warnes.net}\n  based on \\code{Hmisc:::sasxport.get} by Frank E. Harrell, Jr.}\n\\section{Note}{\n  This code provides a subset of the functionality of the\n  \\code{sasxport.get} function in the Hmisc library.\n}\n\\seealso{\n  \\code{\\link[foreign]{read.xport}},\n  \\code{\\link{label}},\n  \\code{\\link[Hmisc]{sas.get}},\n  \\code{\\link[Hmisc]{sasxport.get}},\n  \\code{\\link{Dates}},\n  \\code{\\link{DateTimeClasses}},\n  \\code{\\link[chron]{chron}},\n  \\code{\\link[foreign]{lookup.xport}},\n  \\code{\\link[Hmisc]{contents}},\n  \\code{\\link[Hmisc]{describe}},\n  \\code{\\link{label}},\n  \\code{\\link{SASformat}},\n  \\code{\\link{SASiformat}}, and\n  \\code{\\link{SAStype}}\n}\n\\examples{\n\n## -------\n## SAS code to generate test dataset:\n## -------\n## libname y SASV5XPT \"test2.xpt\";\n##\n## PROC FORMAT; VALUE race 1=green 2=blue 3=purple; RUN;\n## PROC FORMAT CNTLOUT=format;RUN;  * Name, e.g. 'format', unimportant;\n## data test;\n## LENGTH race 3 age 4;\n## age=30; label age=\"Age at Beginning of Study\";\n## race=2;\n## d1='3mar2002'd ;\n## dt1='3mar2002 9:31:02'dt;\n## t1='11:13:45't;\n## output;\n##\n## age=31;\n## race=4;\n## d1='3jun2002'd ;\n## dt1='3jun2002 9:42:07'dt;\n## t1='11:14:13't;\n## output;\n## format d1 mmddyy10. dt1 datetime. t1 time. race race.;\n## run;\n## data z; LENGTH x3 3 x4 4 x5 5 x6 6 x7 7 x8 8;\n##    DO i=1 TO 100;\n##        x3=ranuni(3);\n##        x4=ranuni(5);\n##        x5=ranuni(7);\n##        x6=ranuni(9);\n##        x7=ranuni(11);\n##        x8=ranuni(13);\n##        output;\n##        END;\n##    DROP i;\n##    RUN;\n## PROC MEANS; RUN;\n## PROC COPY IN=work OUT=y;SELECT test format z;RUN; *Creates test2.xpt;\n## ------\n\n## Read this dataset from a local file:\ntestFile <- system.file('extdata', 'test2.xpt', package=\"SASxport\")\nw <- read.xport(testFile)\nclass(w)\nsapply(w, head)\n\n\\dontrun{\n## Or read a copy of test2.xpt available on the web:\nurl <- 'http://biostat.mc.vanderbilt.edu/wiki/pub/Main/Hmisc/test2.xpt'\nw <- read.xport(url)\n}\n\n## We can also get the dataset wrapped in a list\nw <- read.xport(testFile, as.list=TRUE)\nclass(w)\nsapply(w, head)\n\n## And we can ask for the format information to be included as well.\nw <- read.xport(testFile, as.list=TRUE, include.formats=TRUE)\nclass(w)\nsapply(w, head)\n\n\\dontshow{\nstopifnot( is.data.frame(w)==FALSE && is.list(w)==TRUE )\n}\n\n\n#### The Hmisc library provides many useful functions for interacting with\n#### data imported from SAS via read.xport()\nlibrary(Hmisc)\n\ndescribe(w$TEST)   # see labels, format names for dataset test\nlapply(w, describe, \"\")# see descriptive stats in more detail for each variable\n\ncontents(w$TEST)   # another way to see variable attributes\nlapply(w, contents)# show contents of individual items in more detail\n\noptions(digits=7)  # compare the following matrix with PROC MEANS output\nt(sapply(w$Z, function(x)\n c(Mean=mean(x),SD=sqrt(var(x)),Min=min(x),Max=max(x))))\n\n}\n\\keyword{interface}\n\\keyword{manip}\n",
    "created" : 1458943228870.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "683503986",
    "id" : "4ED4AE88",
    "lastKnownWriteTime" : 1458943411,
    "last_content_update" : 1458943411733,
    "path" : "~/src/r-gregmisc/SASxport/man/read.xport.Rd",
    "project_path" : "man/read.xport.Rd",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_doc"
}